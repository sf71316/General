//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18408
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18408。
// 
#pragma warning disable 1591

namespace General.Service.OssEpg {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OssEpgWebServiceSoap", Namespace="http://www.microsoft.com/iptv/oss/branch/epg")]
    public partial class OssEpgWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ReadEPGByDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEpgFromXmlFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OssEpgWebService() {
            this.Url = global::General.Service.Properties.Settings.Default.General_Service_OssEpg_OssEpgWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ReadEPGByDateRangeCompletedEventHandler ReadEPGByDateRangeCompleted;
        
        /// <remarks/>
        public event ReadVersionCompletedEventHandler ReadVersionCompleted;
        
        /// <remarks/>
        public event UpdateEpgFromXmlFileCompletedEventHandler UpdateEpgFromXmlFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/iptv/oss/branch/epg/ReadEPGByDateRange", RequestNamespace="http://www.microsoft.com/iptv/oss/branch/epg", ResponseNamespace="http://www.microsoft.com/iptv/oss/branch/epg", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ReadEPGByDateRange(System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("ReadEPGByDateRange", new object[] {
                        start,
                        end});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ReadEPGByDateRangeAsync(System.DateTime start, System.DateTime end) {
            this.ReadEPGByDateRangeAsync(start, end, null);
        }
        
        /// <remarks/>
        public void ReadEPGByDateRangeAsync(System.DateTime start, System.DateTime end, object userState) {
            if ((this.ReadEPGByDateRangeOperationCompleted == null)) {
                this.ReadEPGByDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadEPGByDateRangeOperationCompleted);
            }
            this.InvokeAsync("ReadEPGByDateRange", new object[] {
                        start,
                        end}, this.ReadEPGByDateRangeOperationCompleted, userState);
        }
        
        private void OnReadEPGByDateRangeOperationCompleted(object arg) {
            if ((this.ReadEPGByDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadEPGByDateRangeCompleted(this, new ReadEPGByDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/iptv/oss/branch/epg/ReadVersion", RequestNamespace="http://www.microsoft.com/iptv/oss/branch/epg", ResponseNamespace="http://www.microsoft.com/iptv/oss/branch/epg", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ReadVersion() {
            object[] results = this.Invoke("ReadVersion", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ReadVersionAsync() {
            this.ReadVersionAsync(null);
        }
        
        /// <remarks/>
        public void ReadVersionAsync(object userState) {
            if ((this.ReadVersionOperationCompleted == null)) {
                this.ReadVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadVersionOperationCompleted);
            }
            this.InvokeAsync("ReadVersion", new object[0], this.ReadVersionOperationCompleted, userState);
        }
        
        private void OnReadVersionOperationCompleted(object arg) {
            if ((this.ReadVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadVersionCompleted(this, new ReadVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/iptv/oss/branch/epg/UpdateEpgFromXmlFile", RequestNamespace="http://www.microsoft.com/iptv/oss/branch/epg", ResponseNamespace="http://www.microsoft.com/iptv/oss/branch/epg", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateEpgFromXmlFile(string filePath) {
            this.Invoke("UpdateEpgFromXmlFile", new object[] {
                        filePath});
        }
        
        /// <remarks/>
        public void UpdateEpgFromXmlFileAsync(string filePath) {
            this.UpdateEpgFromXmlFileAsync(filePath, null);
        }
        
        /// <remarks/>
        public void UpdateEpgFromXmlFileAsync(string filePath, object userState) {
            if ((this.UpdateEpgFromXmlFileOperationCompleted == null)) {
                this.UpdateEpgFromXmlFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEpgFromXmlFileOperationCompleted);
            }
            this.InvokeAsync("UpdateEpgFromXmlFile", new object[] {
                        filePath}, this.UpdateEpgFromXmlFileOperationCompleted, userState);
        }
        
        private void OnUpdateEpgFromXmlFileOperationCompleted(object arg) {
            if ((this.UpdateEpgFromXmlFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEpgFromXmlFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReadEPGByDateRangeCompletedEventHandler(object sender, ReadEPGByDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadEPGByDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadEPGByDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReadVersionCompletedEventHandler(object sender, ReadVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateEpgFromXmlFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591