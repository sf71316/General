//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.17929
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.17929。
// 
#pragma warning disable 1591

namespace General.Service.OssDiagnostics {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DiagnosticsNotificationsWSSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Principal))]
    public partial class DiagnosticsNotificationsWSSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendDiagnosticRequestToDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendRebootRequestToDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDataRefreshNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDetailedDiagnosticsStateByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDetailedDiagnosticsStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadDetailedDiagnosticsDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadStartingDataForDetailedDiagnosticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClientEventsFromDetailedDiagnosticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClientFiltersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadClientFiltersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateClientFiltersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DiagnosticsNotificationsWSSoap() {
            this.Url = global::General.Service.Properties.Settings.Default.General_Service_OssDiagnostics_Diagnostics;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendDiagnosticRequestToDeviceCompletedEventHandler SendDiagnosticRequestToDeviceCompleted;
        
        /// <remarks/>
        public event SendRebootRequestToDeviceCompletedEventHandler SendRebootRequestToDeviceCompleted;
        
        /// <remarks/>
        public event SendDataRefreshNotificationCompletedEventHandler SendDataRefreshNotificationCompleted;
        
        /// <remarks/>
        public event UpdateDetailedDiagnosticsStateByDateCompletedEventHandler UpdateDetailedDiagnosticsStateByDateCompleted;
        
        /// <remarks/>
        public event UpdateDetailedDiagnosticsStateCompletedEventHandler UpdateDetailedDiagnosticsStateCompleted;
        
        /// <remarks/>
        public event ReadDetailedDiagnosticsDataCompletedEventHandler ReadDetailedDiagnosticsDataCompleted;
        
        /// <remarks/>
        public event ReadStartingDataForDetailedDiagnosticsCompletedEventHandler ReadStartingDataForDetailedDiagnosticsCompleted;
        
        /// <remarks/>
        public event DeleteClientEventsFromDetailedDiagnosticsCompletedEventHandler DeleteClientEventsFromDetailedDiagnosticsCompleted;
        
        /// <remarks/>
        public event DeleteClientFiltersCompletedEventHandler DeleteClientFiltersCompleted;
        
        /// <remarks/>
        public event ReadClientFiltersCompletedEventHandler ReadClientFiltersCompleted;
        
        /// <remarks/>
        public event UpdateClientFiltersCompletedEventHandler UpdateClientFiltersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendDiagnosticRequestToDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendDiagnosticRequestToDevice(string deviceId, string url) {
            this.Invoke("SendDiagnosticRequestToDevice", new object[] {
                        deviceId,
                        url});
        }
        
        /// <remarks/>
        public void SendDiagnosticRequestToDeviceAsync(string deviceId, string url) {
            this.SendDiagnosticRequestToDeviceAsync(deviceId, url, null);
        }
        
        /// <remarks/>
        public void SendDiagnosticRequestToDeviceAsync(string deviceId, string url, object userState) {
            if ((this.SendDiagnosticRequestToDeviceOperationCompleted == null)) {
                this.SendDiagnosticRequestToDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDiagnosticRequestToDeviceOperationCompleted);
            }
            this.InvokeAsync("SendDiagnosticRequestToDevice", new object[] {
                        deviceId,
                        url}, this.SendDiagnosticRequestToDeviceOperationCompleted, userState);
        }
        
        private void OnSendDiagnosticRequestToDeviceOperationCompleted(object arg) {
            if ((this.SendDiagnosticRequestToDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDiagnosticRequestToDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendRebootRequestToDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendRebootRequestToDevice(string deviceExternalId, string message, long timeout, string reason, bool forceReboot, [System.Xml.Serialization.XmlAnyElementAttribute()] System.Xml.XmlElement[] Any) {
            this.Invoke("SendRebootRequestToDevice", new object[] {
                        deviceExternalId,
                        message,
                        timeout,
                        reason,
                        forceReboot,
                        Any});
        }
        
        /// <remarks/>
        public void SendRebootRequestToDeviceAsync(string deviceExternalId, string message, long timeout, string reason, bool forceReboot, System.Xml.XmlElement[] Any) {
            this.SendRebootRequestToDeviceAsync(deviceExternalId, message, timeout, reason, forceReboot, Any, null);
        }
        
        /// <remarks/>
        public void SendRebootRequestToDeviceAsync(string deviceExternalId, string message, long timeout, string reason, bool forceReboot, System.Xml.XmlElement[] Any, object userState) {
            if ((this.SendRebootRequestToDeviceOperationCompleted == null)) {
                this.SendRebootRequestToDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendRebootRequestToDeviceOperationCompleted);
            }
            this.InvokeAsync("SendRebootRequestToDevice", new object[] {
                        deviceExternalId,
                        message,
                        timeout,
                        reason,
                        forceReboot,
                        Any}, this.SendRebootRequestToDeviceOperationCompleted, userState);
        }
        
        private void OnSendRebootRequestToDeviceOperationCompleted(object arg) {
            if ((this.SendRebootRequestToDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendRebootRequestToDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendDataRefreshNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendDataRefreshNotification([System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] string[] groupExternalIds) {
            this.Invoke("SendDataRefreshNotification", new object[] {
                        groupExternalIds});
        }
        
        /// <remarks/>
        public void SendDataRefreshNotificationAsync(string[] groupExternalIds) {
            this.SendDataRefreshNotificationAsync(groupExternalIds, null);
        }
        
        /// <remarks/>
        public void SendDataRefreshNotificationAsync(string[] groupExternalIds, object userState) {
            if ((this.SendDataRefreshNotificationOperationCompleted == null)) {
                this.SendDataRefreshNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDataRefreshNotificationOperationCompleted);
            }
            this.InvokeAsync("SendDataRefreshNotification", new object[] {
                        groupExternalIds}, this.SendDataRefreshNotificationOperationCompleted, userState);
        }
        
        private void OnSendDataRefreshNotificationOperationCompleted(object arg) {
            if ((this.SendDataRefreshNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDataRefreshNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDetailedDiagnosticsStateByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDetailedDiagnosticsStateByDate(string deviceExternalId, System.DateTime expirationTime) {
            this.Invoke("UpdateDetailedDiagnosticsStateByDate", new object[] {
                        deviceExternalId,
                        expirationTime});
        }
        
        /// <remarks/>
        public void UpdateDetailedDiagnosticsStateByDateAsync(string deviceExternalId, System.DateTime expirationTime) {
            this.UpdateDetailedDiagnosticsStateByDateAsync(deviceExternalId, expirationTime, null);
        }
        
        /// <remarks/>
        public void UpdateDetailedDiagnosticsStateByDateAsync(string deviceExternalId, System.DateTime expirationTime, object userState) {
            if ((this.UpdateDetailedDiagnosticsStateByDateOperationCompleted == null)) {
                this.UpdateDetailedDiagnosticsStateByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDetailedDiagnosticsStateByDateOperationCompleted);
            }
            this.InvokeAsync("UpdateDetailedDiagnosticsStateByDate", new object[] {
                        deviceExternalId,
                        expirationTime}, this.UpdateDetailedDiagnosticsStateByDateOperationCompleted, userState);
        }
        
        private void OnUpdateDetailedDiagnosticsStateByDateOperationCompleted(object arg) {
            if ((this.UpdateDetailedDiagnosticsStateByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDetailedDiagnosticsStateByDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDetailedDiagnosticsState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDetailedDiagnosticsState(string deviceExternalId, bool enabled) {
            this.Invoke("UpdateDetailedDiagnosticsState", new object[] {
                        deviceExternalId,
                        enabled});
        }
        
        /// <remarks/>
        public void UpdateDetailedDiagnosticsStateAsync(string deviceExternalId, bool enabled) {
            this.UpdateDetailedDiagnosticsStateAsync(deviceExternalId, enabled, null);
        }
        
        /// <remarks/>
        public void UpdateDetailedDiagnosticsStateAsync(string deviceExternalId, bool enabled, object userState) {
            if ((this.UpdateDetailedDiagnosticsStateOperationCompleted == null)) {
                this.UpdateDetailedDiagnosticsStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDetailedDiagnosticsStateOperationCompleted);
            }
            this.InvokeAsync("UpdateDetailedDiagnosticsState", new object[] {
                        deviceExternalId,
                        enabled}, this.UpdateDetailedDiagnosticsStateOperationCompleted, userState);
        }
        
        private void OnUpdateDetailedDiagnosticsStateOperationCompleted(object arg) {
            if ((this.UpdateDetailedDiagnosticsStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDetailedDiagnosticsStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadDetailedDiagnosticsData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientEvents[] ReadDetailedDiagnosticsData(System.Guid deviceExternalId, string sgUrl, long startNum, uint numEvents) {
            object[] results = this.Invoke("ReadDetailedDiagnosticsData", new object[] {
                        deviceExternalId,
                        sgUrl,
                        startNum,
                        numEvents});
            return ((ClientEvents[])(results[0]));
        }
        
        /// <remarks/>
        public void ReadDetailedDiagnosticsDataAsync(System.Guid deviceExternalId, string sgUrl, long startNum, uint numEvents) {
            this.ReadDetailedDiagnosticsDataAsync(deviceExternalId, sgUrl, startNum, numEvents, null);
        }
        
        /// <remarks/>
        public void ReadDetailedDiagnosticsDataAsync(System.Guid deviceExternalId, string sgUrl, long startNum, uint numEvents, object userState) {
            if ((this.ReadDetailedDiagnosticsDataOperationCompleted == null)) {
                this.ReadDetailedDiagnosticsDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadDetailedDiagnosticsDataOperationCompleted);
            }
            this.InvokeAsync("ReadDetailedDiagnosticsData", new object[] {
                        deviceExternalId,
                        sgUrl,
                        startNum,
                        numEvents}, this.ReadDetailedDiagnosticsDataOperationCompleted, userState);
        }
        
        private void OnReadDetailedDiagnosticsDataOperationCompleted(object arg) {
            if ((this.ReadDetailedDiagnosticsDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadDetailedDiagnosticsDataCompleted(this, new ReadDetailedDiagnosticsDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadStartingDataForDetailedDiagnostics", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long ReadStartingDataForDetailedDiagnostics(string deviceExternalId, System.DateTime time, ref System.Guid deviceId, ref string sgURL) {
            object[] results = this.Invoke("ReadStartingDataForDetailedDiagnostics", new object[] {
                        deviceExternalId,
                        time,
                        deviceId,
                        sgURL});
            deviceId = ((System.Guid)(results[1]));
            sgURL = ((string)(results[2]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ReadStartingDataForDetailedDiagnosticsAsync(string deviceExternalId, System.DateTime time, System.Guid deviceId, string sgURL) {
            this.ReadStartingDataForDetailedDiagnosticsAsync(deviceExternalId, time, deviceId, sgURL, null);
        }
        
        /// <remarks/>
        public void ReadStartingDataForDetailedDiagnosticsAsync(string deviceExternalId, System.DateTime time, System.Guid deviceId, string sgURL, object userState) {
            if ((this.ReadStartingDataForDetailedDiagnosticsOperationCompleted == null)) {
                this.ReadStartingDataForDetailedDiagnosticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadStartingDataForDetailedDiagnosticsOperationCompleted);
            }
            this.InvokeAsync("ReadStartingDataForDetailedDiagnostics", new object[] {
                        deviceExternalId,
                        time,
                        deviceId,
                        sgURL}, this.ReadStartingDataForDetailedDiagnosticsOperationCompleted, userState);
        }
        
        private void OnReadStartingDataForDetailedDiagnosticsOperationCompleted(object arg) {
            if ((this.ReadStartingDataForDetailedDiagnosticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadStartingDataForDetailedDiagnosticsCompleted(this, new ReadStartingDataForDetailedDiagnosticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteClientEventsFromDetailedDiagnostics", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteClientEventsFromDetailedDiagnostics(string deviceExternalId) {
            this.Invoke("DeleteClientEventsFromDetailedDiagnostics", new object[] {
                        deviceExternalId});
        }
        
        /// <remarks/>
        public void DeleteClientEventsFromDetailedDiagnosticsAsync(string deviceExternalId) {
            this.DeleteClientEventsFromDetailedDiagnosticsAsync(deviceExternalId, null);
        }
        
        /// <remarks/>
        public void DeleteClientEventsFromDetailedDiagnosticsAsync(string deviceExternalId, object userState) {
            if ((this.DeleteClientEventsFromDetailedDiagnosticsOperationCompleted == null)) {
                this.DeleteClientEventsFromDetailedDiagnosticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClientEventsFromDetailedDiagnosticsOperationCompleted);
            }
            this.InvokeAsync("DeleteClientEventsFromDetailedDiagnostics", new object[] {
                        deviceExternalId}, this.DeleteClientEventsFromDetailedDiagnosticsOperationCompleted, userState);
        }
        
        private void OnDeleteClientEventsFromDetailedDiagnosticsOperationCompleted(object arg) {
            if ((this.DeleteClientEventsFromDetailedDiagnosticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClientEventsFromDetailedDiagnosticsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteClientFilters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteClientFilters(string deviceExternalId) {
            this.Invoke("DeleteClientFilters", new object[] {
                        deviceExternalId});
        }
        
        /// <remarks/>
        public void DeleteClientFiltersAsync(string deviceExternalId) {
            this.DeleteClientFiltersAsync(deviceExternalId, null);
        }
        
        /// <remarks/>
        public void DeleteClientFiltersAsync(string deviceExternalId, object userState) {
            if ((this.DeleteClientFiltersOperationCompleted == null)) {
                this.DeleteClientFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClientFiltersOperationCompleted);
            }
            this.InvokeAsync("DeleteClientFilters", new object[] {
                        deviceExternalId}, this.DeleteClientFiltersOperationCompleted, userState);
        }
        
        private void OnDeleteClientFiltersOperationCompleted(object arg) {
            if ((this.DeleteClientFiltersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClientFiltersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadClientFilters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReadClientFilters(string deviceExternalId) {
            object[] results = this.Invoke("ReadClientFilters", new object[] {
                        deviceExternalId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadClientFiltersAsync(string deviceExternalId) {
            this.ReadClientFiltersAsync(deviceExternalId, null);
        }
        
        /// <remarks/>
        public void ReadClientFiltersAsync(string deviceExternalId, object userState) {
            if ((this.ReadClientFiltersOperationCompleted == null)) {
                this.ReadClientFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadClientFiltersOperationCompleted);
            }
            this.InvokeAsync("ReadClientFilters", new object[] {
                        deviceExternalId}, this.ReadClientFiltersOperationCompleted, userState);
        }
        
        private void OnReadClientFiltersOperationCompleted(object arg) {
            if ((this.ReadClientFiltersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadClientFiltersCompleted(this, new ReadClientFiltersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateClientFilters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateClientFilters(string deviceExternalId, ClientFilter[] status) {
            this.Invoke("UpdateClientFilters", new object[] {
                        deviceExternalId,
                        status});
        }
        
        /// <remarks/>
        public void UpdateClientFiltersAsync(string deviceExternalId, ClientFilter[] status) {
            this.UpdateClientFiltersAsync(deviceExternalId, status, null);
        }
        
        /// <remarks/>
        public void UpdateClientFiltersAsync(string deviceExternalId, ClientFilter[] status, object userState) {
            if ((this.UpdateClientFiltersOperationCompleted == null)) {
                this.UpdateClientFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateClientFiltersOperationCompleted);
            }
            this.InvokeAsync("UpdateClientFilters", new object[] {
                        deviceExternalId,
                        status}, this.UpdateClientFiltersOperationCompleted, userState);
        }
        
        private void OnUpdateClientFiltersOperationCompleted(object arg) {
            if ((this.UpdateClientFiltersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateClientFiltersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DiagnosticsSoap", Namespace="http://www.microsoft.com/iptv/oss/diagnostics")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Principal))]
    public partial class DiagnosticsSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMigrateRequestToDeviceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DiagnosticsSoap() {
            this.Url = global::General.Service.Properties.Settings.Default.General_Service_OssDiagnostics_Diagnostics;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMigrateRequestToDeviceCompletedEventHandler SendMigrateRequestToDeviceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/iptv/oss/diagnostics/SendMigrateRequestToDevice", RequestNamespace="http://www.microsoft.com/iptv/oss/diagnostics", ResponseNamespace="http://www.microsoft.com/iptv/oss/diagnostics", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMigrateRequestToDevice(string deviceExternalId, string bootstrapURL) {
            this.Invoke("SendMigrateRequestToDevice", new object[] {
                        deviceExternalId,
                        bootstrapURL});
        }
        
        /// <remarks/>
        public void SendMigrateRequestToDeviceAsync(string deviceExternalId, string bootstrapURL) {
            this.SendMigrateRequestToDeviceAsync(deviceExternalId, bootstrapURL, null);
        }
        
        /// <remarks/>
        public void SendMigrateRequestToDeviceAsync(string deviceExternalId, string bootstrapURL, object userState) {
            if ((this.SendMigrateRequestToDeviceOperationCompleted == null)) {
                this.SendMigrateRequestToDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMigrateRequestToDeviceOperationCompleted);
            }
            this.InvokeAsync("SendMigrateRequestToDevice", new object[] {
                        deviceExternalId,
                        bootstrapURL}, this.SendMigrateRequestToDeviceOperationCompleted, userState);
        }
        
        private void OnSendMigrateRequestToDeviceOperationCompleted(object arg) {
            if ((this.SendMigrateRequestToDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMigrateRequestToDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ossDiagnosticsNotificationsSoap", Namespace="http://www.microsoft.com/iptv/oss/diagnostics")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Principal))]
    public partial class ossDiagnosticsNotificationsSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ReadDeviceStateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ossDiagnosticsNotificationsSoap() {
            this.Url = global::General.Service.Properties.Settings.Default.General_Service_OssDiagnostics_Diagnostics;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ReadDeviceStateCompletedEventHandler ReadDeviceStateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/iptv/oss/diagnostics/ReadDeviceState", RequestNamespace="http://www.microsoft.com/iptv/oss/diagnostics", ResponseNamespace="http://www.microsoft.com/iptv/oss/diagnostics", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeviceState ReadDeviceState(Device device) {
            object[] results = this.Invoke("ReadDeviceState", new object[] {
                        device});
            return ((DeviceState)(results[0]));
        }
        
        /// <remarks/>
        public void ReadDeviceStateAsync(Device device) {
            this.ReadDeviceStateAsync(device, null);
        }
        
        /// <remarks/>
        public void ReadDeviceStateAsync(Device device, object userState) {
            if ((this.ReadDeviceStateOperationCompleted == null)) {
                this.ReadDeviceStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadDeviceStateOperationCompleted);
            }
            this.InvokeAsync("ReadDeviceState", new object[] {
                        device}, this.ReadDeviceStateOperationCompleted, userState);
        }
        
        private void OnReadDeviceStateOperationCompleted(object arg) {
            if ((this.ReadDeviceStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadDeviceStateCompleted(this, new ReadDeviceStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ClientEvents {
        
        private long idField;
        
        private System.DateTime timeField;
        
        private string nameField;
        
        private string subSystemField;
        
        private string dataField;
        
        private string severityField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string SubSystem {
            get {
                return this.subSystemField;
            }
            set {
                this.subSystemField = value;
            }
        }
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Device))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/iptv/oss/diagnostics")]
    public abstract partial class Principal {
        
        private string externalIDField;
        
        private PrincipalStatus statusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ExternalID {
            get {
                return this.externalIDField;
            }
            set {
                this.externalIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public PrincipalStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/iptv/oss/diagnostics")]
    public enum PrincipalStatus {
        
        /// <remarks/>
        enabled,
        
        /// <remarks/>
        disabled,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/iptv/oss/diagnostics")]
    public partial class Device : Principal {
        
        private string accountExternalIdField;
        
        private string pinField;
        
        private System.Guid idField;
        
        private string versionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AccountExternalId {
            get {
                return this.accountExternalIdField;
            }
            set {
                this.accountExternalIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Pin {
            get {
                return this.pinField;
            }
            set {
                this.pinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ClientFilter {
        
        private ClientFilterType categoryTypeField;
        
        private string itemNameField;
        
        private string sinkNameField;
        
        private bool enabledField;
        
        /// <remarks/>
        public ClientFilterType CategoryType {
            get {
                return this.categoryTypeField;
            }
            set {
                this.categoryTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ItemName {
            get {
                return this.itemNameField;
            }
            set {
                this.itemNameField = value;
            }
        }
        
        /// <remarks/>
        public string SinkName {
            get {
                return this.sinkNameField;
            }
            set {
                this.sinkNameField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ClientFilterType {
        
        /// <remarks/>
        ByLogLevel,
        
        /// <remarks/>
        ByCategory,
        
        /// <remarks/>
        ByEventName,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/iptv/oss/diagnostics")]
    public enum DeviceState {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        StandBy,
        
        /// <remarks/>
        DoNotDisturb,
        
        /// <remarks/>
        PowerOn,
        
        /// <remarks/>
        OffLine,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendDiagnosticRequestToDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendRebootRequestToDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendDataRefreshNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDetailedDiagnosticsStateByDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDetailedDiagnosticsStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReadDetailedDiagnosticsDataCompletedEventHandler(object sender, ReadDetailedDiagnosticsDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadDetailedDiagnosticsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadDetailedDiagnosticsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClientEvents[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClientEvents[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReadStartingDataForDetailedDiagnosticsCompletedEventHandler(object sender, ReadStartingDataForDetailedDiagnosticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadStartingDataForDetailedDiagnosticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadStartingDataForDetailedDiagnosticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid deviceId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sgURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteClientEventsFromDetailedDiagnosticsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteClientFiltersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReadClientFiltersCompletedEventHandler(object sender, ReadClientFiltersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadClientFiltersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadClientFiltersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateClientFiltersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMigrateRequestToDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReadDeviceStateCompletedEventHandler(object sender, ReadDeviceStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadDeviceStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadDeviceStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeviceState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeviceState)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591